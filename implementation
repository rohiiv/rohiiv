def can_connect_nails_with_rods(n, m, nails, rods):
    # Step 1: Calculate the distances between consecutive nails
    distances = []
    for i in range(1, n):
        x1, y1 = nails[i - 1]
        x2, y2 = nails[i]
        # Calculate the Manhattan distance between consecutive nails
        distance = abs(x2 - x1) + abs(y2 - y1)
        distances.append(distance)

    # Step 2: Sort distances and rods
    distances.sort()
    rods.sort()

    # Step 3: Try to match each distance with a rod
    rod_index = 0
    for distance in distances:
        # Find a rod that is equal or larger than the distance
        while rod_index < m and rods[rod_index] < distance:
            rod_index += 1
        # If no suitable rod is found, return False
        if rod_index == m:
            return False
        # Move to the next rod since this one is used
        rod_index += 1

    # Step 4: If all distances were matched, return True
    return True

# Input
n, m = map(int, input().split())
nails = [tuple(map(int, input().split())) for _ in range(n)]
rods = list(map(int, input().split()))

# Output the result
if can_connect_nails_with_rods(n, m, nails, rods):
    print("YES")
else:
    print("NO")
